stages:
  - test
  - build
  - docker
  - deploy

variables:
  APP: backend
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: >-
    -Dhttps.protocols=TLSv1.2
    -Dmaven.repo.local=.m2/repository
    -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN
    -Dorg.slf4j.simpleLogger.showDateTime=true
    -Djava.awt.headless=true
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: >-
    --batch-mode
    --errors
    --fail-at-end
    --show-version
    -DinstallAtEnd=true
    -DdeployAtEnd=true  


# !===== TEST JAVA =====

.test-template:
  stage: test
  cache:
    key: "maven-$CI_COMMIT_REF_SLUG"
    paths:
      - .m2/repository
  script:
    - rm -rf ./ci/ci
    - mvn $MAVEN_CLI_OPTS test
  allow_failure: true

test:dev:
  extends: .test-template
  tags: [shell]
  only:
    - merge_requests
    - develop
    - ci

test:stage:
  extends: .test-template
  tags: [shell-stage]
  only: [stage]


# !===== BUILD JAVA BINARIES =====

.build-template:
  stage: build
  cache:
    key: "maven-$CI_COMMIT_REF_SLUG"
    paths:
      - .m2/repository
  script:
    - mvn $MAVEN_CLI_OPTS package -DskipTests=true
  artifacts:
    name: "Maven artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    paths:
      - target/
    expire_in: 25min

build:dev:
  script:
    - ls /ci/ci
  extends: .build-template
  tags: [shell]
  only:
    - merge_requests
    - develop
    - ci

build:stage:
  extends: .build-template
  tags: [shell-stage]
  only: [stage]


# !===== BUILD DOCKER IMAGE AND UPLOAD IT TO THE REGISTRY =====

.docker-template:
  stage: docker
  before_script:
    - echo "$AND_DOCKER_REGISTRY_RW_PASS" | docker login -u nexus "$AND_DOCKER_REGISTRY" --password-stdin
  script:
    - docker build -f ci/Dockerfile --tag $AND_DOCKER_REGISTRY/benefits-$APP:$CI_COMMIT_BRANCH --compress --build-arg BUILDKIT_INLINE_CACHE=1 .
    - docker push $AND_DOCKER_REGISTRY/benefits-$APP:$CI_COMMIT_BRANCH
    - docker system prune -f --filter "label!=keep"

docker:dev:
  extends: .docker-template
  tags: [shell]
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_COMMIT_BRANCH == "ci"
      variables:
        CI_COMMIT_BRANCH: develop

docker:stage:
  extends: .docker-template
  tags: [shell-stage]
  only: [stage]

# docker:prod:
#   extends: .docker-template
#   tags: [main-shell]
#   only: [main]


# !===== DEPLOY APPLICATION =====

.deploy-template:
  stage: deploy
  before_script:
    - echo "$AND_DOCKER_REGISTRY_RO_PASS" | docker login -u nexus-ro "$AND_DOCKER_REGISTRY" --password-stdin
  script:
    - docker-compose -f ci/docker-compose.yml stop || true
    - docker system prune -f --filter "label!=keep"
    - docker pull $AND_DOCKER_REGISTRY/benefits-$APP:$CI_COMMIT_BRANCH || true
    - docker-compose -f ci/docker-compose.yml up --force-recreate -d

deploy:dev:
  extends: .deploy-template
  tags: [shell]
  environment:
    name: dev
    url: http://10.10.15.127:8080
    deployment_tier: development
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_COMMIT_BRANCH == "ci"
      variables:
        CI_COMMIT_BRANCH: develop

deploy:stage:
  extends: .deploy-template
  tags: [shell-stage]
  environment:
    name: stage
    url: http://10.10.15.189:8080
    deployment_tier: staging
  only: [stage]

# deploy:prod:
#   extends: .deploy-template
#   tags: [main-shell]
#   environment:
#     name: prod
#     url: http://10.10.15.000:80
#     deployment_tier: production
#   only: [main]
